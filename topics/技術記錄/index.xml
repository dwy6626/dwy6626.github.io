<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>技術記錄 on dw's 小站</title><link>https://dwye.dev/topics/%E6%8A%80%E8%A1%93%E8%A8%98%E9%8C%84/</link><description>Recent content in 技術記錄 on dw's 小站</description><generator>Hugo -- gohugo.io</generator><copyright>&amp;copy; 2020. All rights reserved.</copyright><lastBuildDate>Sat, 23 Apr 2022 17:49:26 +0800</lastBuildDate><atom:link href="https://dwye.dev/topics/%E6%8A%80%E8%A1%93%E8%A8%98%E9%8C%84/index.xml" rel="self" type="application/rss+xml"/><item><title>放棄 Disqus 開始使用 utterances 作為 GitHub Page 的留言板</title><link>https://dwye.dev/post/no-disqus-but-utterances/</link><pubDate>Sat, 23 Apr 2022 17:49:26 +0800</pubDate><guid>https://dwye.dev/post/no-disqus-but-utterances/</guid><description>&lt;p>最近發現 Disqus 留言系統會擅自投放一堆廣告，上網查了一下，才發現&lt;a href="https://blog.gslin.org/archives/2021/02/11/9960/%E5%8E%9F%E4%BE%86-disqus-%E5%B7%B2%E7%B6%93%E8%A2%AB%E7%B6%B2%E8%B7%AF%E5%BB%A3%E5%91%8A%E5%85%AC%E5%8F%B8%E8%B2%B7%E8%B5%B0%E4%BA%86/">Disqus 早就被網路廣告公司買走了&lt;/a>，不只會追蹤使用者行為，更開始塞一堆醜醜的廣告（最不能接受的點&amp;hellip;我自己都因為美觀不敢亂放廣告了），一氣之下決定換掉他。&lt;/p></description></item><item><title>Python 實作 LRU Cache (LeetCode 146)</title><link>https://dwye.dev/post/python-lru/</link><pubDate>Wed, 16 Feb 2022 18:41:25 +0800</pubDate><guid>https://dwye.dev/post/python-lru/</guid><description>&lt;h2 id="題目">題目&lt;/h2>
&lt;p>LeetCode 146 的名稱就叫 &lt;a href="https://leetcode.com/problems/lru-cache/">LRU Cache&lt;/a>，算是教科書等級的題目，希望你可以實作一個 cache，在內部的 Cache Key 有著透過 LRU 演算法的淘汰機制（最久沒影使用的 Key 會優先淘汰）。&lt;/p>
&lt;p>時間複雜度限制 get 和 set 都要 O(1)。&lt;/p></description></item><item><title>在 GitHub Action 優化 Node.js App 的環境建置</title><link>https://dwye.dev/post/github-action-npm-cache/</link><pubDate>Wed, 22 Dec 2021 20:41:23 +0800</pubDate><guid>https://dwye.dev/post/github-action-npm-cache/</guid><description>&lt;p>身為一位維護公司內部建置與發佈工具的工程師，建立方便又有效率的 CI/CD 工具來建置與測試產品，並且為產品的穩定性把關，一直是我們團隊的重要目標。不過我們對待自己的內部工具常常比產品來得隨便&amp;hellip;所以在我和主管聊過之後，決定慢慢幫我們的內部工具也來建立一些自動化的測試以及部署。&lt;/p></description></item><item><title>Git Checkout / Switch / Restore 比較</title><link>https://dwye.dev/post/git-checkout-switch-restore/</link><pubDate>Tue, 14 Sep 2021 13:41:25 +0800</pubDate><guid>https://dwye.dev/post/git-checkout-switch-restore/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>git checkout 原本的功能有：&lt;/p>
&lt;ul>
&lt;li>切換分支&lt;/li>
&lt;li>檔案管理&lt;/li>
&lt;/ul>
&lt;p>雖然兩者只是一個功能的一體兩面（從特定分支拿取特定檔案），但大多時候我們使用的時候會避免在一個指令進行太多邏輯操作，所以大多都只用到切換分支或是檔案管理其中一個。&lt;br>
而且說實在，&lt;code>checkout&lt;/code> 一個檔案實在不是一個語意上很直觀的說法。&lt;/p></description></item><item><title>我的 Node.js Process 怎麼不會結束？</title><link>https://dwye.dev/post/node-event-loop-and-termination/</link><pubDate>Tue, 07 Sep 2021 16:13:25 +0800</pubDate><guid>https://dwye.dev/post/node-event-loop-and-termination/</guid><description>&lt;p>工作時碰到了某個以 Node.js 撰寫的 scheduled job（排程工作）一直保持在 running 的狀態，永遠不會進到 complete。這時一般首先想到的是，程式可能在某個地方卡住了，進入無窮等待（像是進入無限迴圈一樣）。&lt;/p>
&lt;p>一開始我試著使用懶人 debug 方法：加入幾個 &lt;code>console.log&lt;/code> 看看 code 是跑到哪裡停住了。&lt;br>
結果，到程式碼最後一個 &lt;code>console.log&lt;/code> 也有被執行到。&lt;br>
但程式依然沒有結束。&lt;/p></description></item><item><title>Git 小技巧</title><link>https://dwye.dev/post/git-tricks/</link><pubDate>Wed, 01 Sep 2021 13:41:25 +0800</pubDate><guid>https://dwye.dev/post/git-tricks/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;h3 id="原來-git-比想像中的易學難精">原來 Git 比想像中的易學難精&lt;/h3>
&lt;p>剛開始學 git，我是隨便買了一本薄薄的書，然後跟著裡面的內容照著跑，就把 git 的基礎學起來了，例如說暫存區、分支、commit、tag、push 等等&lt;br>
曾經我以為這樣就算學會 git 了，我也這樣用 git 用了一兩年，直到有一天在實習的公司被問到說&lt;/p>
&lt;blockquote>
&lt;p>你會用 Git？那你會用 rebase 嗎？&lt;/p>
&lt;/blockquote>
&lt;p>&amp;hellip;那是什麼？&lt;/p></description></item><item><title>客製化 git 使用的 SSH Key</title><link>https://dwye.dev/post/git-custom-ssh/</link><pubDate>Thu, 05 Aug 2021 15:33:25 +0800</pubDate><guid>https://dwye.dev/post/git-custom-ssh/</guid><description>&lt;p>寫完&lt;a href="https://dwye.dev/post/ssh-switch-key">一個指令切換預設使用的 SSH Key&lt;/a>這篇之後，又思考了一下有沒有其他方式來解決這個同個電腦中使用兩個 github 帳號的問題，畢竟那篇是採用 ssh-agent level 來解決，但其實搞不好也可以直接從 git 的 config 下手，因此這次重新用更多關鍵字去調查解法，發現 git 其實也支援客製化 ssh 指令。&lt;/p></description></item><item><title>一個指令切換預設使用的 SSH Key</title><link>https://dwye.dev/post/ssh-switch-key/</link><pubDate>Tue, 03 Aug 2021 20:00:25 +0800</pubDate><guid>https://dwye.dev/post/ssh-switch-key/</guid><description>&lt;p>因應公司和個人有分開的 github 帳號，為了能在同一台電腦同使用者內工作，已經幾次重複解決這個問題，故寫篇文章記錄之。&lt;/p>
&lt;h3 id="檢視現在使用的-ssh-key">檢視現在使用的 SSH Key&lt;/h3>
&lt;p>我們可以使用 &lt;code>ssh-add&lt;/code> 這個工具來檢視目前使用 &lt;code>ssh&lt;/code> 指令連線時，會使用的 ssh key：&lt;/p></description></item><item><title>Ruby Object Model</title><link>https://dwye.dev/post/ruby-object-model/</link><pubDate>Sat, 17 Jul 2021 23:41:25 +0800</pubDate><guid>https://dwye.dev/post/ruby-object-model/</guid><description>&lt;h2 id="前言ruby-中的物件導向">前言：Ruby 中的物件導向&lt;/h2>
&lt;p>Ruby Object Model 是我覺得 Ruby 算是十分特別也是十分重要的概念。&lt;/p>
&lt;p>在一般的物件導向程式語言中，物件是類別的實體，而資料型態是資料型態。一個變數可以儲存一個資料型態，一個變數也可以指向一個物件，但資料型態和物件是兩回事。&lt;/p>
&lt;p>但在 Ruby 中，&lt;strong>所有的東西都是物件&lt;/strong>。&lt;/p></description></item><item><title>Rake Tasks 進階：Invoke, Execute, Enhance</title><link>https://dwye.dev/post/rake-execute-invoke-enhance/</link><pubDate>Thu, 01 Jul 2021 13:41:25 +0800</pubDate><guid>https://dwye.dev/post/rake-execute-invoke-enhance/</guid><description>&lt;p>在「&lt;a href="https://dwye.dev/post/rake">如何在 Rails 中寫 Rake Tasks&lt;/a>」一文中，已經紀錄了在 Ruby on Rails 中 Rake Task 的基本寫法。&lt;/p>
&lt;p>這邊要來談一些最近碰到的議題：&lt;/p>
&lt;ul>
&lt;li>如何直接在一個 rake task 中呼叫另一個 rake task？&lt;/li>
&lt;li>或是如何在一個 rake task 執行時，做額外的事情？&lt;/li>
&lt;/ul></description></item><item><title>如何在 Rails 中寫 Rake Tasks</title><link>https://dwye.dev/post/rake/</link><pubDate>Sun, 27 Jun 2021 13:41:25 +0800</pubDate><guid>https://dwye.dev/post/rake/</guid><description>&lt;p>本文使用當下最新的 Ruby 3.0.1 和 Rails 6.1.4 作為示範&lt;/p>
&lt;h2 id="什麼是-rake">什麼是 Rake&lt;/h2>
&lt;p>Rake 就像是 Ruby 的 Make，或是 Golang 的 Mage，其實也就是可以讓我們寫一些基本的 task 和 build 程序的地方。&lt;/p></description></item><item><title>一次搞懂物件導向程式設計的特性</title><link>https://dwye.dev/post/oop-design-principles/</link><pubDate>Mon, 31 May 2021 00:41:25 +0800</pubDate><guid>https://dwye.dev/post/oop-design-principles/</guid><description>&lt;p>會寫程式很簡單，寫出好的程式很難。上次寫了一篇 &lt;a href="https://dwye.dev/post/clean-code">Clean Code 筆記&lt;/a>，算是比較進階的，最近剛好複習了比較基本的一些物件導向相關原則與特性，於是就寫出了這篇。&lt;/p>
&lt;p>這些物件導向的基本觀念和 Clean Code 一樣，平常可以幫助自己讓 code 寫得更易懂且更好維護，而且 Code Review 時可以拿來嗆同事（Ｘ），同時也算是面試的熱門考題之一，因此一次整理成一篇記下來，希望能幫助到自己和其他剛好找到這篇的人。&lt;/p>
&lt;p>這邊主要以條列和簡單說明為主，因為我相信原則和定律皆由其簡單的解釋方式，若要更深的討論也是可以分別寫成文章的，但就不是這篇的目的了。&lt;/p></description></item><item><title>Python 費氏數列解法（五）：不同解法的執行時間比較</title><link>https://dwye.dev/post/python-fibonacci-5/</link><pubDate>Sat, 29 May 2021 20:18:25 +0800</pubDate><guid>https://dwye.dev/post/python-fibonacci-5/</guid><description>&lt;p>終於來到最後一篇了，前面幾篇依序寫了各種不同費氏數列的寫法，包含：&lt;a href="https://dwye.dev/post/python-fibonacci">遞迴、迭代&lt;/a>、&lt;a href="https://dwye.dev/post/python-fibonacci-2">矩陣&lt;/a>、從矩陣衍生的&lt;a href="https://dwye.dev/post/python-fibonacci-3">Fast doubling&lt;/a>、以及最後&lt;a href="https://dwye.dev/post/python-fibonacci-4">公式解&lt;/a>和補充的&lt;a href="https://dwye.dev/post/python-decimal">精確版公式解&lt;/a>。&lt;/p>
&lt;p>從時間複雜度來看，從矩陣開始都是 $O(\lg n)$（如果我們把公式解內指數運算當作 $O(\lg n)$ 的話），那這三個哪個比較快呢？&lt;/p>
&lt;p>&lt;a href="https://yodalee.me/2019/02/2019_fibonacci/">這篇&lt;/a>文章裡面用 c 比較了 fast doubling 和公式解，發現號稱常數時間複雜度的公式解，反而慢上很多，而且還需要考慮精確度問題。&lt;/p></description></item><item><title>使用 Decimal 提高浮點運算精確度</title><link>https://dwye.dev/post/python-decimal/</link><pubDate>Fri, 28 May 2021 20:18:25 +0800</pubDate><guid>https://dwye.dev/post/python-decimal/</guid><description>&lt;p>在&lt;a href="https://dwye.dev/post/python-fibonacci-4/">第四篇&lt;/a>提到費氏數列的公式解會遇到浮點數問題，只能精準算到 122 位。因為浮點數是利用二進位的小數來做儲存，對於非二進位的數字會有誤差。而且其儲存位數有上限，對於無理數的運算，超過一定的大小就會出現精確度問題。&lt;/p>
&lt;p>所以這篇就要來簡單使用 Python 內建的 Decimal module 來拉高浮點數運算的精確度。&lt;/p></description></item><item><title>Python 費氏數列解法（四）：公式解與推導</title><link>https://dwye.dev/post/python-fibonacci-4/</link><pubDate>Sun, 09 May 2021 17:18:25 +0800</pubDate><guid>https://dwye.dev/post/python-fibonacci-4/</guid><description>&lt;p>在&lt;a href="https://dwye.dev/post/python-fibonacci-2">第二篇&lt;/a>介紹了費氏數列的矩陣解法，不過費氏數列其實是可以直接用公式算出第 n 項的值的，這邊就來介紹並推導一下公式解，順便幫自己複習一下數學 XD&lt;/p></description></item><item><title>Python 費氏數列解法（三）：Fast Doubling</title><link>https://dwye.dev/post/python-fibonacci-3/</link><pubDate>Tue, 06 Apr 2021 20:18:25 +0800</pubDate><guid>https://dwye.dev/post/python-fibonacci-3/</guid><description>&lt;p>&lt;a href="https://dwye.dev/post/python-fibonacci-2">上篇&lt;/a>寫到費氏數列的矩陣解法來達成 $O(\lg n)$ 的時間複雜度，實際上可以再做一些變化來簡化計算。如果目標時間複雜度是 $O(\lg n)$，代表我們要能每次直接計算當 n 變成兩倍時的數值。&lt;/p>
&lt;p>下面介紹的 Fast Doubling 方法就是這個例子。&lt;/p></description></item><item><title>Hugo 排程發表文章</title><link>https://dwye.dev/post/hugo-scheduled-post/</link><pubDate>Sat, 03 Apr 2021 02:59:59 +0800</pubDate><guid>https://dwye.dev/post/hugo-scheduled-post/</guid><description>&lt;p>不管是 FB 粉專，或是以前無名小站時代的部落格系統，都有提供排程發表文章的功能，讓寫手在靈感特別多的時候，或是行銷人員希望配合特定時程，可以預先寫好未來要發表的文章，並且在時間到的時候自動發表。&lt;/p>
&lt;p>問題來了，如果是使用像 Hugo 這種靜態網站產生器，能否實現相同的功能呢？&lt;/p></description></item><item><title>Python 費氏數列解法（二）：矩陣解</title><link>https://dwye.dev/post/python-fibonacci-2/</link><pubDate>Wed, 31 Mar 2021 20:18:25 +0800</pubDate><guid>https://dwye.dev/post/python-fibonacci-2/</guid><description>&lt;p>在&lt;a href="https://dwye.dev/post/python-fibonacci">上篇&lt;/a>我們討論了費氏數列的各種基本解法。&lt;/p>
&lt;p>原本我也以為 O(n) 的迭代解就已經是標準解法了，直到被大神朋友指正：&lt;/p>
&lt;blockquote>
&lt;p>問費氏數列應該是想聽 $O(\lg n)$ 解法吧？&lt;/p>
&lt;/blockquote>
&lt;p>查了一下還真的有，&lt;a href="https://medium.com/fcamels-notes/%E8%B2%BB%E6%B0%8F%E6%95%B8%E5%88%97-o-logn-%E7%9A%84%E8%A7%A3%E6%B3%95-e36067e57baa">這篇文章&lt;/a>寫得蠻完整的，這篇會參考該篇文章來撰寫，但會用我自己的話以及 Python 寫出來。&lt;/p></description></item><item><title>Google Domain 客製化 Email Address</title><link>https://dwye.dev/post/google-domain-mail/</link><pubDate>Tue, 30 Mar 2021 16:01:56 +0800</pubDate><guid>https://dwye.dev/post/google-domain-mail/</guid><description>在 Google Domain 買了網域之後，就覺得該多利用一下這個新的個人網域 dwye.dev。 最簡單的事情就是做一個 email address。 原本以為會需要配合 Google Workspace (原本的 G Suite，畢竟在 Google Domain 一直出現他的廣告&amp;hellip;)，後來才發現其實 Google Domain 可以直接免費設置轉信到現有信箱。 還可以 100 筆。 又是 100，跟之前 Blogger 的一個帳號最多 100 個 blog 一樣，100 是什麼 magic number 嗎？ 正文 進入 Google Domain，選擇你的網域 在側邊欄選擇電子郵件 忽略 Google Workspace 的廣告，捲到底下有個「電子郵件轉寄」，直接給他新增一個電子郵件別名 然後&amp;hellip;就沒了ˊˋ 用起來又是</description></item><item><title>Python 費氏數列解法（一）</title><link>https://dwye.dev/post/python-fibonacci/</link><pubDate>Sun, 28 Mar 2021 20:18:25 +0800</pubDate><guid>https://dwye.dev/post/python-fibonacci/</guid><description>&lt;p>面試被問到的題目，雖然是很基本的題目，但相關延伸也有不少，寫篇文章記錄一下。&lt;/p>
&lt;h2 id="遞迴最基本又直觀的解法">遞迴：最基本又直觀的解法&lt;/h2></description></item><item><title>GitHub Page + Google Domain 設定個人化網域</title><link>https://dwye.dev/post/github-page-google-domain/</link><pubDate>Sat, 27 Mar 2021 19:01:56 +0800</pubDate><guid>https://dwye.dev/post/github-page-google-domain/</guid><description>&lt;p>以前在 KK 實習時，跟 RD 們聊過自架 blog 的事情，並聽說了這個很潮的 &lt;code>.dev&lt;/code> 網域，就把購買個人網域列為將來想嘗試的事之一。&lt;br>
找工作的事情告一段落了（其實也只是在原本實習的公司轉正職 XD），有了固定收入就可以來養個人品牌了 XD。&lt;/p></description></item><item><title>GitHub Action 自動化部署 Hugo 網站</title><link>https://dwye.dev/post/hugo-github-action/</link><pubDate>Sun, 14 Mar 2021 22:01:56 +0800</pubDate><guid>https://dwye.dev/post/hugo-github-action/</guid><description>&lt;p>在今天之前，這個 blog 是&lt;a href="https://dwye.dev/post/hugo-wercker">用 Wercker 做自動化部署&lt;/a>，當時對於 CI/CD 工具沒有太多比較，就直接使用了。&lt;/p>
&lt;p>在 2018 年底，&lt;a href="https://github.blog/2018-10-16-future-of-software/">GitHub 公開了他們的自有 CI/CD 工具 GitHub Action&lt;/a>，並於 2019 年底正式推出。這個工具經過了兩年多的發展，如今也有一定成熟度，社群有很多相關的工具發展起來，當然也不乏 Hugo 的自動化部署。如果 repo 使用 GitHub，那整合 GitHub 自家 CI/CD 當然是最方便的。&lt;/p></description></item><item><title>Python 實作 Disjoint Set 與 Union Find</title><link>https://dwye.dev/post/python-union-find/</link><pubDate>Mon, 22 Feb 2021 18:41:25 +0800</pubDate><guid>https://dwye.dev/post/python-union-find/</guid><description>使用情境 在 Leetcode 寫到一題： 1319. Number of Operations to Make Network Connected 現在有 n 台電腦以及一些 cables 將電腦點對點連接，問需要移動至少幾條 cable 才能讓在所有電腦連成單一網路。 以 graph 的角度來看，電腦就是 nodes，cables 就是 edges。 要將整張 graph 連接起來，至少需要 n-1 個 edges。若一個 graph 裡面有超過 n-1 個 edges，剩下的就是多出來的 edges，可以供我們拿來移動的 edges。 所以第一件事就是要檢查 edges 數量 &amp;gt;= n-1。 當檢查完畢之後，我們有至少 n-1 條 edges，一定可以用這些 edges 將所有 nodes 連接起來。 因為題目只問需要移動幾條 edges，我們可以假設我們</description></item><item><title>Clean Code 心得</title><link>https://dwye.dev/post/clean-code/</link><pubDate>Tue, 08 Sep 2020 00:41:25 +0800</pubDate><guid>https://dwye.dev/post/clean-code/</guid><description>因為公司有這本書的中文版，在各種等待時間，慢慢把這本看完了，同時也一邊寫些自己認為的重點。 其實我覺得 Clean Code 適合的閱讀對象，是從來沒有接觸過任何 Coding Style 的人。 如果你跟我一樣，有和別人合作過，平常有遵守一些準則（例如 PEP8），或是使用包含 Styling 的 linter (pylint / eslint / rubocop &amp;hellip;)，這本書還是能找到能學習的地方，例如命名原則、封裝的部分、模組的拆分、測試撰寫等等，這些開發準則以及自動化的 formatter 沒辦法告訴你的部分。 也難怪第一次聽到別人推薦大家看這本書的時候，把它歸類在「選讀」，卻又說裡面的內容很重要。因為很多觀念在現在</description></item><item><title>用 zsh + zim + powerlevel10k 讓你的 Terminal 潮又快</title><link>https://dwye.dev/post/zsh-zim-powerlevel10k/</link><pubDate>Mon, 07 Sep 2020 11:41:25 +0800</pubDate><guid>https://dwye.dev/post/zsh-zim-powerlevel10k/</guid><description>&lt;p>在開始之前，還是要先知道為什麼需要這些工具，就先上圖吧：&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/YWNPQiG.png" alt="zsh + zim + powerlevel10k demo">&lt;/p>
&lt;ul>
&lt;li>在 Terminal 內顯示你想要的資訊：git / 時間 / 自訂路徑 / conda / rvm / nvm / 執行結果顯示等等，應有盡有。&lt;/li>
&lt;li>更方便的自動補完，可以直接用 tab 或方向鍵選擇想要補完的結果。&lt;/li>
&lt;li>可以輸入部分指令，就顯示之前打過的指令，也可以用方向鍵上下搜尋&lt;/li>
&lt;/ul></description></item><item><title>Matplotlib 中文字體亂碼問題</title><link>https://dwye.dev/post/matplotlib-font/</link><pubDate>Tue, 03 Mar 2020 23:41:25 +0800</pubDate><guid>https://dwye.dev/post/matplotlib-font/</guid><description>&lt;p>花了一段時間解決這個問題，發篇文章記錄一下。&lt;/p>
&lt;h2 id="嘗試">嘗試&lt;/h2>
&lt;p>一開始想到的是字型設定，所以就看一下系統有哪些中文字型：&lt;/p></description></item><item><title>Wercker 自動化部署 Hugo 網站</title><link>https://dwye.dev/post/hugo-wercker/</link><pubDate>Tue, 03 Sep 2019 00:01:56 +0800</pubDate><guid>https://dwye.dev/post/hugo-wercker/</guid><description>&lt;p>&lt;a href="https://dwye.dev/post/first-post">架好這個網站後的第一篇文章&lt;/a>提到，我是用 Wercker 做自動化部署。&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/CdBoQ3C.png" alt="wercker">&lt;/p></description></item><item><title>讓 VSCode 的 Terminal 執行 Conda 的 Python</title><link>https://dwye.dev/post/vscode-python-terminal/</link><pubDate>Mon, 29 Jul 2019 15:47:44 +0800</pubDate><guid>https://dwye.dev/post/vscode-python-terminal/</guid><description>&lt;p>其實這個問題一直都有在困擾我，不過因為通常都是用 iTerm 另外開 Terminal 測試，或是直接用 VSCode 的 Python Plug-in 執行，所以就比較還好。因為想寫 Side Project，今天決定先認真來解決這個問題。&lt;/p>
&lt;p>於是就找到了這個 issue:&lt;/p></description></item><item><title>在 Jupyter 使用虛擬 Python 環境</title><link>https://dwye.dev/post/venv-jupyter/</link><pubDate>Mon, 04 Mar 2019 23:41:25 +0800</pubDate><guid>https://dwye.dev/post/venv-jupyter/</guid><description>&lt;p>因為交作業要有特定套件，但調參數還是用 Jupyter 方便，所以就研究了下怎麼用特定的 Python 來執行 Jupyter Notebook 或是 JupyterLab。方法有兩種，首先我們先從創建虛擬環境講起：&lt;/p>
&lt;h2 id="準備">準備&lt;/h2>
&lt;h3 id="創建虛擬環境">創建虛擬環境&lt;/h3>
&lt;p>這邊以 conda 為例：&lt;/p></description></item><item><title>VB.NET 之物件陣列</title><link>https://dwye.dev/post/vb-net-object-array/</link><pubDate>Mon, 06 Jun 2011 18:41:25 +0800</pubDate><guid>https://dwye.dev/post/vb-net-object-array/</guid><description>&lt;p>如果有人同時用過 VB6 跟 VB2008（或更新版的 VB），必然會發現其中有許多的差別，在此不一一列舉，不過我想當有人要寫一個踩地雷的程式時，沒有了物件陣列或多或少會帶來一些的不方便。因此筆者在研究了一段時間之後，找出了 VB.NET 中物件陣列的使用方法：它必須要直接使用 &lt;code>Dim&lt;/code> 宣告！&lt;/p></description></item></channel></rss>