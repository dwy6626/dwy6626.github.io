<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>shell on dw's 小站</title><link>https://dwye.dev/tags/shell/</link><description>Recent content in shell on dw's 小站</description><generator>Hugo -- gohugo.io</generator><copyright>&amp;copy; 2020. All rights reserved.</copyright><lastBuildDate>Tue, 14 Sep 2021 13:41:25 +0800</lastBuildDate><atom:link href="https://dwye.dev/tags/shell/index.xml" rel="self" type="application/rss+xml"/><item><title>Git Checkout / Switch / Restore 比較</title><link>https://dwye.dev/post/git-checkout-switch-restore/</link><pubDate>Tue, 14 Sep 2021 13:41:25 +0800</pubDate><guid>https://dwye.dev/post/git-checkout-switch-restore/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>git checkout 原本的功能有：&lt;/p>
&lt;ul>
&lt;li>切換分支&lt;/li>
&lt;li>檔案管理&lt;/li>
&lt;/ul>
&lt;p>雖然兩者只是一個功能的一體兩面（從特定分支拿取特定檔案），但大多時候我們使用的時候會避免在一個指令進行太多邏輯操作，所以大多都只用到切換分支或是檔案管理其中一個。&lt;br>
而且說實在，&lt;code>checkout&lt;/code> 一個檔案實在不是一個語意上很直觀的說法。&lt;/p></description></item><item><title>Git 小技巧</title><link>https://dwye.dev/post/git-tricks/</link><pubDate>Wed, 01 Sep 2021 13:41:25 +0800</pubDate><guid>https://dwye.dev/post/git-tricks/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;h3 id="原來-git-比想像中的易學難精">原來 Git 比想像中的易學難精&lt;/h3>
&lt;p>剛開始學 git，我是隨便買了一本薄薄的書，然後跟著裡面的內容照著跑，就把 git 的基礎學起來了，例如說暫存區、分支、commit、tag、push 等等&lt;br>
曾經我以為這樣就算學會 git 了，我也這樣用 git 用了一兩年，直到有一天在實習的公司被問到說&lt;/p>
&lt;blockquote>
&lt;p>你會用 Git？那你會用 rebase 嗎？&lt;/p>
&lt;/blockquote>
&lt;p>&amp;hellip;那是什麼？&lt;/p></description></item><item><title>客製化 git 使用的 SSH Key</title><link>https://dwye.dev/post/git-custom-ssh/</link><pubDate>Thu, 05 Aug 2021 15:33:25 +0800</pubDate><guid>https://dwye.dev/post/git-custom-ssh/</guid><description>&lt;p>寫完&lt;a href="https://dwye.dev/post/ssh-switch-key">一個指令切換預設使用的 SSH Key&lt;/a>這篇之後，又思考了一下有沒有其他方式來解決這個同個電腦中使用兩個 github 帳號的問題，畢竟那篇是採用 ssh-agent level 來解決，但其實搞不好也可以直接從 git 的 config 下手，因此這次重新用更多關鍵字去調查解法，發現 git 其實也支援客製化 ssh 指令。&lt;/p></description></item><item><title>一個指令切換預設使用的 SSH Key</title><link>https://dwye.dev/post/ssh-switch-key/</link><pubDate>Tue, 03 Aug 2021 20:00:25 +0800</pubDate><guid>https://dwye.dev/post/ssh-switch-key/</guid><description>&lt;p>因應公司和個人有分開的 github 帳號，為了能在同一台電腦同使用者內工作，已經幾次重複解決這個問題，故寫篇文章記錄之。&lt;/p>
&lt;h3 id="檢視現在使用的-ssh-key">檢視現在使用的 SSH Key&lt;/h3>
&lt;p>我們可以使用 &lt;code>ssh-add&lt;/code> 這個工具來檢視目前使用 &lt;code>ssh&lt;/code> 指令連線時，會使用的 ssh key：&lt;/p></description></item><item><title>用 zsh + zim + powerlevel10k 讓你的 Terminal 潮又快</title><link>https://dwye.dev/post/zsh-zim-powerlevel10k/</link><pubDate>Mon, 07 Sep 2020 11:41:25 +0800</pubDate><guid>https://dwye.dev/post/zsh-zim-powerlevel10k/</guid><description>&lt;p>在開始之前，還是要先知道為什麼需要這些工具，就先上圖吧：&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/YWNPQiG.png" alt="zsh + zim + powerlevel10k demo">&lt;/p>
&lt;ul>
&lt;li>在 Terminal 內顯示你想要的資訊：git / 時間 / 自訂路徑 / conda / rvm / nvm / 執行結果顯示等等，應有盡有。&lt;/li>
&lt;li>更方便的自動補完，可以直接用 tab 或方向鍵選擇想要補完的結果。&lt;/li>
&lt;li>可以輸入部分指令，就顯示之前打過的指令，也可以用方向鍵上下搜尋&lt;/li>
&lt;/ul></description></item></channel></rss>